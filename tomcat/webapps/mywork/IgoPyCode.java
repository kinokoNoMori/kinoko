import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class IgoPyCode extends HttpServlet {

    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws IOException, ServletException {
            
            String title = "pythonの囲碁のコード";
            request.setAttribute("name", title);
            
            String code = "#----------------------------------------------------------------------<br>"
            +"#グローバル<br>"
            +"#先後攻の色ｂ先攻<br>"
            +"colors = [\"ｗ\",\"ｂ\"]<br>"
            +"#ベクトル<br>"
            +"vx = [0,1,1, 1, 0,-1,-1,-1]<br>"
            +"vy = [1,1,0,-1,-1,-1, 0, 1]<br>"
            +"v = [vx,vy]<br>"
            +"#囲い<br>"
            +"waku = \"＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝\"<br>"
            +"#得点<br>"
            +"count_b = 0<br>"
            +"count_w = 0<br>"
            +"<br>"
            +"<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#メインメソッド<br>"
            +"def main():<br>"
            +"　　space = \"囗\"<br>"
            +"<br>"
            +"　　square =  [[space for i in range(9)] for j in range(9)]<br>"
            +"　　#空かどうか真で空<br>"
            +"　　empty = [[True for i in range(9)] for j in range(9)]<br>"
            +"　　#初期黒<br>"
            +"　　square[5][4] = \"ｂ\"<br>"
            +"　　square[4][5] = \"ｂ\"<br>"
            +"　　#初期白<br>"
            +"　　square[4][4] = \"ｗ\"<br>"
            +"　　square[5][5] = \"ｗ\"<br>"
            +"<br>"
            +"　　#升目の数値<br>"
            +"　　wake = space<br>"
            +"　　square[0][0] = \"ー\"<br>"
            +"　　#マスのメモリ<br>"
            +"　　memori = [\"０\",\"１\",\"２\",\"３\",\"４\",\"５\",\"６\",\"７\",\"８\"]<br>"
            +"　　for i in range(1,9):<br>"
            +"　　　　square[0][i] = memori[i]<br>"
            +"　　　　square[i][0] = memori[i] <br>"
            +"<br>"
            +"　　<br>"
            +"　　#まず初期状態を出力<br>"
            +"　　print(\"初期盤面を出力します\")<br>"
            +"　　print(waku)<br>"
            +"　　display(square)<br>"
            +"<br>"
            +"　　#Trueの間ゲーム続行<br>"
            +"　　gameLoop = True<br>"
            +"<br>"
            +"　　#ターン数の変数<br>"
            +"　　turn = 1<br>"
            +"<br>"
            +"　　startCall()<br>"
            +"　　<br>"
            +"　　#ゲームの本筋ループ<br>"
            +"　　while gameLoop:<br>"
            +"　　　　#正しく入力されたらinput_loopがFalseになり置き換え処理へ<br>"
            +"　　　　input_loop=True<br>"
            +"　　　　while input_loop:<br>"
            +"　　　　　　turn_color = colors[turn%2]<br>"
            +"　　　　　　non_turn_color = colors[1-turn%2]<br>"
            +"　　　　　　<br>"
            +"　　　　　　print(\"{0}ターン目,{1}のターンです。\".format(turn,turn_color))<br>"
            +"　　　　　　print(\"「座標x(横) 座標y(縦)」の順で入力してください\")<br>"
            +"<br>"
            +"　　　　　　<br>"
            +"　　　　　　#置く位置を入力<br>"
            +"　　　　　　te = input().split()#x y<br>"
            +"　　　　　　X=int(te[0])<br>"
            +"　　　　　　Y=int(te[1])<br>"
            +"　　　　　　if X==99 and Y==99:#終了コマンド<br>"
            +"　　　　　　　　turn = lastTurn()<br>"
            +"　　　　　　　　break<br>"
            +"　　　　　　elif 1<=X and X<=8 and 1<=Y and Y<=8:<br>"
            +"　　　　　　　　#配置 置く位置が空白だった場合配置可能<br>"
            +"　　　　　　　　if square[X][Y]==space:<br>"
            +"　　　　　　　　　　#入力ループ終了<br>"
            +"　　　　　　　　　　input_loop = False<br>"
            +"　　　　　　　　　　#bを配置<br>"
            +"　　　　　　　　　　square[X][Y] = turn_color<br>"
            +"　　　　　　　　　　#間の置き換え<br>"
            +"　　　　　　　　　　for i in range(0,8):#8方向<br>"
            +"　　　　　　　　　　　　#置き換える向き(v[i])と位置(p)ーーpointer = 現在地XY + 向きv[i]<br>"
            +"　　　　　　　　　　　　px,py = p_change(i,X,vx,Y,vy)<br>"
            +"　　　　　　　　　　　　#碁盤の枠内にいる間、置き換え探し<br>"
            +"　　　　　　　　　　　　while 1<=px and px<=8 and 1<=py and py<=8:<br>"
            +"　　　　　　　　　　　　　　#色同じなら間置き換え<br>"
            +"　　　　　　　　　　　　　　if square[px][py]==turn_color:<br>"
            +"　　　　　　　　　　　　　　　　#置き換えの開始地点<br>"
            +"　　　　　　　　　　　　　　　　dx = X<br>"
            +"　　　　　　　　　　　　　　　　dy = Y<br>"
            +"　　　　　　　　　　　　　　　　#置き換え処理changeループ<br>"
            +"　　　　　　　　　　　　　　　　change = True<br>"
            +"　　　　　　　　　　　　　　　　while change:<br>"
            +"　　　　　　　　　　　　　　　　　　square[dx][dy]=turn_color#置き換え<br>"
            +"　　　　　　　　　　　　　　　　　　dx += vx[i]<br>"
            +"　　　　　　　　　　　　　　　　　　dy += vy[i]<br>"
            +"　　　　　　　　　　　　　　　　　　if dx==px and dy==py:<br>"
            +"　　　　　　　　　　　　　　　　　　　　change=False<br>"
            +"　　　　　　　　　　　　　　　　#置き換え終わったらブレイク<br>"
            +"　　　　　　　　　　　　　　　　break<br>"
            +"　　　　　　　　　　　　　　#空白なら次の方向へ<br>"
            +"　　　　　　　　　　　　　　elif square[px][py]==space:<br>"
            +"　　　　　　　　　　　　　　　　break<br>"
            +"　　　　　　　　　　　　　　#色違いなら次のマス<br>"
            +"　　　　　　　　　　　　　　elif square[px][py]==non_turn_color:<br>"
            +"　　　　　　　　　　　　　　　　px += vx[i]<br>"
            +"　　　　　　　　　　　　　　　　py += vy[i]<br>"
            +"　　　　　　　　　　　　　　else:<br>"
            +"　　　　　　　　　　　　　　　　break<br>"
            +"　　　　　　elif X<=0 or 9<= X or Y<=0 or 9<=Y:<br>"
            +"　　　　　　　　print(\"入力が不正です\")<br>"
            +"　　　　　　　　print(\"ｘとｙは１から８以内で入力してください\")<br>"
            +"<br>"
            +"　　　　　　#入力が失敗した場合<br>"
            +"　　　　　　else:<br>"
            +"　　　　　　　　print(\"入力が不正です\")<br>"
            +"　　　　　　　　　　　　　　　　<br>"
            +"　　　　#現在の盤面を出力<br>"
            +"　　　　display(square)<br>"
            +"　　　　<br>"
            +"　　　　#全部埋め終わった時<br>"
            +"　　　　if turn >= 60:<br>"
            +"　　　　　　gameLoop = False<br>"
            +"　　　　　　break<br>"
            +"　　　　else:<br>"
            +"　　　　　　pass<br>"
            +"　　　　#次のターンへ<br>"
            +"　　　　turn += 1<br>"
            +"<br>"
            +"　　#最終結果出力<br>"
            +"　　endCall()<br>"
            +"　　count_b,count_w = display(square)<br>"
            +"　　result(count_b,count_w,turn)<br>"
            +"<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#px,pyを計算するメソッド<br>"
            +"def p_change(i,X,vx,Y,vy):<br>"
            +"　　px=X+vx[i]<br>"
            +"　　py=Y+vy[i]<br>"
            +"　　return px,py<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#表示<br>"
            +"def display(square):<br>"
            +"　　count_b = 0<br>"
            +"　　count_w = 0<br>"
            +"　　print(waku)<br>"
            +"　　for i in range(0,9):<br>"
            +"　　　　print(\"||  \", end=\"\")<br>"
            +"　　　　for j in range(0,9):<br>"
            +"　　　　　　if square[j][i]==\"ｂ\":<br>"
            +"　　　　　　　　count_b += 1<br>"
            +"　　　　　　elif square[j][i]==\"ｗ\":<br>"
            +"　　　　　　　　count_w += 1<br>"
            +"　　　　　　else:<br>"
            +"　　　　　　　　pass<br>"
            +"　　　　　　print(\"{0} \".format(square[j][i]), end=\"\")<br>"
            +"　　　　print(\"||\")<br>"
            +"　　print(waku)<br>"
            +"　　print(\"ｂの得点：{0}　－　ｗの得点：{1}\".format(count_b,count_w))<br>"
            +"　　return count_b,count_w<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#skip<br>"
            +"def lastTurn():<br>"
            +"　　return 61<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#結果出力<br>"
            +"def result(BP,WP,turn):<br>"
            +"　　if turn >= 60:<br>"
            +"　　　　if BP >WP:<br>"
            +"　　　　　　winner = 1<br>"
            +"　　　　　　print(\"{0}の勝利です\".format(colors[winner]))<br>"
            +"　　　　elif BP < WP:<br>"
            +"　　　　　　winner = 0<br>"
            +"　　　　　　print(\"{0}の勝利です\".format(colors[winner]))<br>"
            +"　　　　else:<br>"
            +"　　　　　　print(\"ドローです\")<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#スタートエンドコール<br>"
            +"def startCall():<br>"
            +"　　print(\"-先攻はb、後攻はwです\")<br>"
            +"　　print(\"==============\")<br>"
            +"　　print(\"==Game Start==\")<br>"
            +"　　print(\"==============\")<br>"
            +"def endCall():<br>"
            +"　　print(\"===============\")<br>"
            +"　　print(\"==Game Result==\")<br>"
            +"　　print(\"===============\")<br>"
            +"#----------------------------------------------------------------------<br>"
            +"#実行<br>"
            +"main()";
            request.setAttribute("code", code);
            
            String view = "/WEB-INF/views/code.jsp";
            RequestDispatcher dispatcher = request.getRequestDispatcher(view);
            dispatcher.forward(request, response);
    }
}